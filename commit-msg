#!/bin/bash
url_start="https://www.sjoblomj.org"
url_end=".html"

timestamp=$(date -Ru)
changes=$(git status --porcelain -uno | grep -Po '(?=^[^ ])\K.+(?=/)' | sed 's|/| |g' | sed 's|"||g' | sort | uniq)
authorname=$(git config --get user.name)

op=$(  echo "${changes}" | awk '{print substr($1, 1, 1)}')
dir=$( echo "${changes}" | awk '{print $2}' | sort | uniq)
cat=$( echo "${changes}" | awk '{print $3}' | sort | uniq)
name=$(echo "${changes}" | awk '{print $4}' | sed '/^\s*$/d' | sort | uniq)

if [ -z "$op" ] || [ -z "$dir" ] || [ -z "$cat" ] || [ -z "$name" ]; then
    exit 0
fi
multidirs=0
if [ $(echo "$dir" | wc -l) -gt 1 ] || [ $(echo "$cat" | wc -l) -gt 1 ] || [ $(echo "$name" | wc -l) -gt 1 ]; then
    multidirs=1
fi

title=""
link=""
author=""
description=""
categories=""

if [ "$multidirs" -eq 1 ]; then
    # There are multiple directories changed.
    # Do nothing; Ask the user to set the params manually
    :
else
    action=""
    if [ "${op}" == "A" ]; then
         action="New $(echo $cat | sed 's/s$//') published"
    else
         action="Updated $(echo $cat | sed 's/s$//')"
    fi
    title="${action}: $(echo $name | sed 's/_/ /g' | sed 's/\b\(.\)/\u\1/g')"
    link="${url_start}/${cat}/${name}${url_end}"
    categories=$(cat "${dir}/${cat}/${name}/index.md" | grep -Po '.*article.*categories=\K[^|}]+(?=)' | awk '{$1=$1};1')
    if [ -z "$categories" ]; then
        categories="${cat}"
    fi
fi

function get_user_input {
    local value="$1"
    local text="$2"

    printf "## $text ##\n" > /dev/tty
    if [ -n "$value" ]; then
        printf "Suggestion: '\e[37m${value}\e[0m'. Provide $text or Enter to accept suggestion:\n" > /dev/tty
    else
        printf "Provide $text: " > /dev/tty
    fi
    read < /dev/tty
    if [ -n "$REPLY" ]; then
        value="$REPLY"
        printf "\n" > /dev/tty
    fi
    echo "$value" | sed 's/&/\&amp;/g; s/</\&lt;/g; s/>/\&gt;/g; s/"/\&quot;/g; s/'"'"'/\&#39;/g' # Escape any HTML
}

function ask_user {
    echo "" > /dev/tty
    ans=""
    while true; do
        read -p "Add to \"$1\" RSS feed (y/n)?" -n 1 -r < /dev/tty
        echo > /dev/tty
        case "$REPLY" in
          y|Y ) ans="y"; break;;
          n|N ) ans="n"; break;;
          * ) echo "Invalid answer" > /dev/tty;;
        esac
    done
    echo "" > /dev/tty
    echo $ans
}

numCats=$(echo "$cat" | wc -l)
for t in $dir/$cat $dir "." ; do
    rssfile="$t/rss.xml"
    if [ ! -e "$rssfile" ]; then
        rssfile="$t/index/rss.xml"
    fi
    if [ ! -e "$rssfile" ]; then
        if [ "$t" != "." ]; then
            echo "Can't find ${rssfile}" > /dev/tty
        fi
        continue
    fi

    if [ "$t" != "." ] || [ $numCats -gt 1 ]; then
        q="$t"
        if [ "$t" == "." ]; then
            q="Root"
        fi
        if [ $(ask_user "$q") == "n" ]; then
            if [ $numCats -eq 1 ]; then
                break
            else
                continue
            fi
        fi

        title=$(      get_user_input "${title}"       "Title")
        link=$(       get_user_input "${link}"        "Link")
        author=$(     get_user_input "${authorname}"  "Author name")
        categories=$( get_user_input "${categories}"  "Categories")
        description=$(get_user_input "${description}" "Description")
    fi

    item="\n    <item>\n      <title>${title}</title>\n      <dc:creator>${author}</dc:creator>\n      <guid isPermaLink=\"false\">${link} ${timestamp}</guid>\n      <link>${link}</link>\n      <description>${description}</description>\n      <category>${categories}</category>\n      <pubDate>${timestamp}</pubDate>\n    </item>"
    awk -v timestamp="${timestamp}" -i inplace '{if ($0 ~ "<lastBuildDate>") $0 = "    <lastBuildDate>" timestamp "</lastBuildDate>"; print $0; }' "$rssfile"
    awk -v item="${item}" -i inplace '{if ($0 ~ "<!-- Content -->") $0 = $0 item; print $0; }' "$rssfile"

    git add "$rssfile"
    printf "\e[32mAdded $rssfile to commit\e[0m\n"
done
